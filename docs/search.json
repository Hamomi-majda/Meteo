[
  {
    "objectID": "meteo.html",
    "href": "meteo.html",
    "title": "initialisation des dates de debut et fin d’extraction de données",
    "section": "",
    "text": "import numpy as np\nimport requests import datetime from dateutil.relativedelta import relativedelta\n\ninitialisation des dates de debut et fin d’extraction de données\ndate_debut = datetime.datetime.now() - relativedelta(days=2) date_fin = date_debut + relativedelta(days=6) # formatage des dates pour importer le bon URL date_debut_formattee = date_debut.strftime(‘%Y-%m-%d’) date_fin_formattee = date_fin.strftime(‘%Y-%m-%d’)\n\n\ncopie de l’URL du site open-meteo avec les differents critères qui nous interessent\nurl = f”https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&hourly=temperature_2m,weathercode,precipitation&daily=weathercode,temperature_2m_max,temperature_2m_min,wind_speed_10m_max,precipitation_sum&timezone=Europe%2FLondon&start_date={date_debut_formattee}&end_date={date_fin_formattee}”\n\n\nrécuperation des données\nresponse = requests.get(url) data = response.json()\n\n\ninitialisation des tableaux de données\ntemp = data[“hourly”][“temperature_2m”] precipitation = data[“daily”][“precipitation_sum”] precipitation_h = data[“hourly”][“precipitation”] wind = data[“daily”][“wind_speed_10m_max”] tempmin = data[“daily”][“temperature_2m_min”] tempmax = data[“daily”][“temperature_2m_max”] icon = data[“daily”][“weathercode”]\ndef date(i):\nd = datetime.datetime.now() + relativedelta(days=i)\nreturn f\"{d.day}-{d.month}-{d.year}\"\ndef index(i):\njours_semaine = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nreturn jours_semaine[(datetime.datetime.now().weekday() + i) % 7]  \ndef icon(i): ““” Association de chaque code WBO à un pictogramme correspondant. Retourne le chemin d’accès au pictogramme par une chaîne de caractères. Version daily. ““” code = icon[i]\nif code == 0:\n    return \"icon/wi-day-sunny.svg\"\nelif code == 1:\n    return \"icon/wi-day-sunny-overcast.svg\"\nelif code == 2:\n    return \"icon/wi-day-cloudy.svg\"\nelif code == 3:\n    return \"icon/wi-cloud.svg\"\nelif code in [45, 48]:\n    return \"icon/wi-fog.svg\"\nelif code in [51, 53, 55, 56, 57]:\n    return \"icon/wi-sprinkle.svg\"\nelif code in [61, 81, 82]:\n    return \"icon/wi-showers.svg\"\nelif code == 63:\n    return \"icon/wi-rain-wind.svg\"\nelif code in [65, 66, 67]:\n    return \"icon/wi-rain.svg\"\nelif code in [71, 73, 75, 85, 86]:\n    return \"icon/wi-snow.svg\"\nelif code in [95, 96]:\n    return \"icon/wi-storm-showers.svg\"\nelif code == 99:\n    return \"icon/wi-thunderstorm.svg\"\nelse:\n    return \"icon/wi-moon-new.svg\"\ndef iconrain(i):\n\"\"\"\nRetourne une image sous format HTML correspondant à l'intensité des précipitations.\n\"\"\"\nif not isinstance(precipitation[i], float):\n    return \"\"\n\nintensity = precipitation[i]\n\nif 0 &lt; intensity &lt;= 2:\n    return f'&lt;img src=\"icon/wi-raindrop.svg\" width=\"20\" height=\"20\" /&gt;'\nelif intensity &gt; 2:\n    return f'&lt;img src=\"icon/wi-raindrops.svg\" width=\"40\" height=\"40\" /&gt;'\nelse:\n    return \"\""
  }
]